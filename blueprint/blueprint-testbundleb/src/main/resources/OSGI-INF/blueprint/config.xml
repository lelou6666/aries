<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0"
           xmlns:ext="http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.4.0"
           xmlns:one="http://ns.handler.one"
           xmlns:two="http://ns.handler.two"
           xmlns:three="http://ns.handler.three"
           xmlns:four="http://ns.handler.four"
           xmlns:fourim="http://ns.handler.four.import"
           xmlns:five="http://ns.handler.five"
           xmlns:fiveim="http://ns.handler.five.import"
           xmlns:six="http://ns.handler.six"
           xmlns:sixim="http://ns.handler.six.import"
           xmlns:seven="http://ns.handler.seven"
           default-availability="optional">

    <ext:property-placeholder placeholder-prefix="$(" placeholder-suffix=")">
        <ext:default-properties>
            <ext:property name="test1" value="test1value"/>
        </ext:default-properties>
    </ext:property-placeholder>
    

    <ext:property-placeholder placeholder-prefix="$[" placeholder-suffix="]" ignore-missing-locations="true">
        <ext:default-properties>
            <ext:property name="test2" value="$(test1)"/>
        </ext:default-properties>
    </ext:property-placeholder>

    <ext:property-placeholder placeholder-prefix="${" placeholder-suffix="}" ignore-missing-locations="true">
        <ext:default-properties>
            <ext:property name="test3" value="$[test2]"/>
        </ext:default-properties>
    </ext:property-placeholder>
    
  <bean id="PlaceHolderTestBean" class="org.apache.aries.blueprint.testbundleb.OtherBean" init-method="init">
     <property name="testValue" value="${test3}"/>
  </bean>    
    
  <!-- Default test.. no other ns interaction. -->
  <bean id="TestBeanA" class="org.apache.aries.blueprint.testbundleb.TestBean" scope="singleton">
     <property name="red" value="RED"/>
     <property name="green" value="GREEN"/>
     <property name="blue" value="BLUE"/>
  </bean>

  <!-- NShandler one test, custom element, component injection, metadata modification, passthrumetadata -->
  <one:nshandlerone one:attribone="ONE" one:attribtwo="ONE_VALUE"/>
  <bean id="TestBeanB" class="org.apache.aries.blueprint.testbundleb.TestBean" scope="singleton" one:attribone="red" one:attribtwo="ONE" >     
     <property name="green" value="GREEN"/>
     <property name="blue" value="BLUE"/>
  </bean>
  
  <!-- Nshandler two test, interceptors -->
  <bean id="TestBeanC" class="org.apache.aries.blueprint.testbundleb.TestBean" scope="singleton" two:attribone="dummy">
     <property name="red" value="RED"/>
     <property name="green" value="GREEN"/>
     <property name="blue" value="BLUE"/>
  </bean>
  
  <!--  drives a method on intercepted TestBeanC expects true as response -->
  <bean id="OtherBeanA" class="org.apache.aries.blueprint.testbundleb.OtherBean" init-method="init">
     <property name="testBean" ref="TestBeanC" />
     <property name="testValue" value="RED"/>
  </bean>
  
  <!--  drives a method on intercepted TestBeanC expects false as response -->
  <bean id="OtherBeanB" class="org.apache.aries.blueprint.testbundleb.OtherBean" init-method="init">
     <property name="testBean" ref="TestBeanC" />
     <property name="testValue" value="BLUE"/>
  </bean>
  
  <!--  causes injection of a bean processor, which understands this sort of bean.. -->
  <bean id="ProcessedBean" class="org.apache.aries.blueprint.testbundleb.BeanForBeanProcessorTest" three:attribone="true"/>
  
  <reference activation="eager" 
    availability="optional" 
    interface="org.apache.aries.blueprint.testbundlea.InterfaceWithDependency" />
    
  <!-- NShandler four test, make sure the schema can be parsed - ARIES-626 Part 1 -->
  <four:nshandlerfour four:id="FOUR">
      <four:stuff>
          <stuff xmlns="">foo</stuff>
      </four:stuff>
  </four:nshandlerfour> 
  <!-- NShandler five test, make sure the schema can be parsed - ARIES-626 Part 2 -->
  <five:nshandlerfive five:id="FIVE" fiveim:attrib="foo">
      <five:stuff>
          <fiveim:stuff>foo</fiveim:stuff>
      </five:stuff>
  </five:nshandlerfive> 
  <!-- NShandler six test, make sure the schema can be parsed with
       external URL to imported schema - ARIES-626 Part 3 -->
  <six:nshandlersix six:id="SIX" sixim:attrib="foo">
      <six:stuff>
          <sixim:stuff>foo</sixim:stuff>
          <mytest:foo xmlns:mytest="http://ns.handler.mytest">blah</mytest:foo>
      </six:stuff>
  </six:nshandlersix> 
  <!-- NShandler seven test, make sure the schema can be parsed with
       external URL to included schema - ARIES-626 Part 4 -->
  <seven:nshandlerseven seven:id="SEVEN" seven:attrib="foo">
      <seven:stuff>
          <seven:stuffinc>foo</seven:stuffinc>
          <mytest:foo xmlns:mytest="http://ns.handler.mytest">blah</mytest:foo>
      </seven:stuff>
  </seven:nshandlerseven> 
  
  
  <reference id="OnlyA" interface="org.apache.aries.blueprint.testbundlea.multi.InterfaceA"/>
  <reference id="AandB" interface="org.apache.aries.blueprint.testbundlea.multi.InterfaceA">
  	<ext:additional-interfaces>
  	    <value>org.apache.aries.blueprint.testbundlea.multi.InterfaceB</value>
  	</ext:additional-interfaces>
  </reference>
  <reference id="AandBandC" interface="org.apache.aries.blueprint.testbundlea.multi.InterfaceA">
  	<ext:additional-interfaces>
  	    <value>org.apache.aries.blueprint.testbundlea.multi.InterfaceB</value>
  	    <value>org.apache.aries.blueprint.testbundlea.multi.InterfaceC</value>
  	</ext:additional-interfaces>
  </reference>
  <!--  this shouldn't ever resolve as D isn't bound -->
  <reference id="AandBandCandD" interface="org.apache.aries.blueprint.testbundlea.multi.InterfaceA" timeout="100">
  	<ext:additional-interfaces>
  	    <value>org.apache.aries.blueprint.testbundlea.multi.InterfaceB</value>
  	    <value>org.apache.aries.blueprint.testbundlea.multi.InterfaceC</value>
  	    <value>org.apache.aries.blueprint.testbundlea.multi.InterfaceD</value>
  	</ext:additional-interfaces>
  </reference>
  
</blueprint>

